#summary Installation of the MxUpdate Update Deployment Tool.

<wiki:toc max_depth="3"/>

----

= Installation =
[http://code.google.com/p/mxupdate/downloads/list Download] and uncompress the !MxUpdate Update deployment tool. E.g. the tool is unpacked into directory {{{C:\project\MxUpdate\}}}.

Start MQL.

Define the MQL environment variable *{{{MXUPDATE_PATH}}}* to the path where the *{{{MxInstall.mql}}}* file is located. E.g.
{{{
set env MXUPDATE_PATH C:\project\MxUpdate\
}}}
If some additional properties must be defined, the MQL environment variable *{{{MXUPDATE_MAPPING_FILE}}}* could be defined. The value is the path of the file which defines the additional properties. E.g.
{{{
set env MXUPDATE_MAPPING_FILE C:\project\MyProjectSettings.properties
}}}
Run MQL script *{{{MxInstall.mql}}}*.
{{{
run C:\project\MxUpdate\MxInstall.mql
}}}
Then the !MxUpdate Update deployment tool is installed and all !MxUpdate JPOs are compiled. The tool could be tested:
{{{
exec prog MxUpdate --help
}}}
The short help for all parameters of !MxUpdate is shown.

----

= Environment Variables =
Following environment variables could be defined and are supported from
{{{MxInstall.mql}}}:
|| *Name*                      || *Description* ||
|| {{{MXUPDATE_PATH}}}         || Defines the root path of the !MxUpdate installation folder where the {{{MxInstall.mql}}} is located. If !MxUpdate installation is defined as SVN external link, the path must be defined to the directory {{{src/main}}}. ||
|| {{{MXUPDATE_MAPPING_FILE}}} || Defines additional properties which overwrites the original defined properties of !MxUpdate. ||
|| {{{MXUPDATE_DEVELOPMENT}}}  || If the value is set to {{{true}}}, the new installed JPOs are not recompiled. Instead only a "standard" compile is done. ||

The environment variables could be defined as MQL or as shell variables and are
evaluated in this order:
  * as MQL environment variable
  * as global MQL environment variable
  * or as shell variable

----

= Parameter Definitions =
An update of already installed JPOs used from the !MxUpdate Update tool is only
done if the last modified date of the file differs from the stored last modified
date in MX. Because TCL could not handle milliseconds for the last modified date
of files, the date format differs from that used from !MxUpdate for the update
of configuration items. The date within the installation must be formatted in
TCL and Java. For the same date the result must be equal in TCL and Java.

For an explanation how to change this properties see also the
[UpdatePropertyFileFormat property file format] description.

|| *Name*                       || *Default Value*              || *Description* ||
|| !InstallFileDateFormatJava   || *{{{yyyy-MM-dd HH:mm:ss}}}*  || Date / time format used within Java / JPOs to install the !MxUpdate Update tool. ||
|| InstallFileDateFormatTCL     || *{{{%Y-%m-%d %H:%M:%S}}}*    || Date / time format used within TCL (MQL) to install the !MxUpdate Update tool. ||

----

= Installation FAQ =

== Alternatives to Manually Downloads ==

=== Using SVN External Link ===
Instead of manually downloading the !MxUpdate Update deployment tool, an
external link could be defined if [http://subversion.tigris.org/ Subversion] is
used. E.g. following property entry "{{{svn:externals}}}" for a directory must
be defined to reference version 0.5.0:
{{{
source http://mxupdate.googlecode.com/svn/mxupdate-update/tags/V0.5.0
}}}
Because for [UpdateDevelopment development] another directory structure is used,
the {{{MXUPDATE_PATH}}} must set to the {{{src/main}}} directory.
The *{{{MxInstall.mql}}}* is located in {{{src/main/resources}}} sub path. The
script itself checks that a development structure is defined and installs
!MxUpdate Update depending on this directory structure.

== Support of old MX versions ==

=== Dimensions ===
If the used MX version within the project does not support the configuration
item "[CI_DM_Dimension Dimension]" the parameter list of the type definition
"Dimension" and type defintion groups "Admin" and "!DataModel" must be changed
that they do not include definitions for the configuration item
"[CI_DM_Dimension Dimension]". Also the "extra" parameters for the
[CI_DM_Dimension dimensions] must be removed from the parameter list. So
following lines must be added to the additional property file:
{{{
TypeDef.Dimension.ParameterList                     =
TypeDef.Dimension.ParameterListOpposite             =

TypeDefGroup.Admin.TypeDefList                      = IEFGlobalConfig,IEFGlobalRegistry,\
                                                      JPO,Program,Page,\
                                                      AttributeBoolean,AttributeDate,AttributeString,\
                                                      AttributeInteger,AttributeReal,\
                                                      Expression,Format,Interface,Policy,Relationship,Rule,Type,\
                                                      Trigger,TriggerGroup,\
                                                      NumberGenerator,ObjectGenerator,\
                                                      Association,Group,Person,PersonAdmin,Role,\
                                                      Channel,Command,Form,Inquiry,Menu,Portal,Table

TypeDefGroup.DataModel.TypeDefList                  = AttributeBoolean,AttributeDate,AttributeString,\
                                                      AttributeInteger,AttributeReal,\
                                                      Expression,Format,Interface,Policy,Relationship,Rule,Type,\
                                                      Trigger,TriggerGroup,\
                                                      NumberGenerator,ObjectGenerator

ParameterDef.DMDimAllowRemoveUnit.ParameterList     =
ParameterDef.DMDimAllowUpdateDefUnit.ParameterList  =
ParameterDef.DMDimAllowUpdateUnitMult.ParameterList =
ParameterDef.DMDimAllowUpdateUnitOffs.ParameterList =
}}}
For a deeper explanation see key "[UpdatePropertyFileFormat_TypeDef TypeDef]" and key "[UpdatePropertyFileFormat_TypeDefGroup TypeDefGroup]" of the property file format.

=== Encoding Issue of Programs ===
Old MX versions does not encodes for programs double closing square brackets
correct. In this case following error is shown:
{{{
    org.xml.sax.SAXParseException: The content of elements must consist of well-formed character data or markup.
}}}
Then the encoding work-around for programs must be activated:
{{{
ParameterDef.ProgramUseEncodingWorkAround.Default = true
}}}
For more information see the documentation for the
[CI_Program program configuration item].

=== Relationship as from / to side for Relationships ===
If the used MX version within the project does not support the feature to use also relationships as from / to side the property "DMRelationSupportRelCons" must be changed and set to {{{false}}}. So following line must be added to the additional property file:
{{{
ParameterDef.DMRelationSupportRelCons.Default = false
}}}
The installed default value is {{{true}}}.

=== Role Types ===
If the used MX version within the project does not support the role type feature, property "!UserRoleSupportRoleType" must be changed and set to {{{false}}}. So following line must be added to the additional property file:
{{{
ParameterDef.UserRoleSupportRoleType.Default = false
}}}
The installed default value is {{{true}}}.

== Support of emxGerLibUpdate ==

=== Use !MxUpdate Update together with emxGerLibUpdate ===
"!MxUpdate Update" and "emxGerLibUpdate" could be used together within one installation. The recommendation is to use only one tool.

The Tool "emxGerLibUpdate" uses and installs other attribute and type names to handle administration objects which are business objects. For attributes this belongs to the author, installed date and version. For types it is the process type (which is called in !MxUpdate [CI_DM_TriggerGroup trigger group]). So following lines must be defined to use !MxUpdate Update and emxGerLibUpdate together in one environment:

{{{
# use attribute names from emxGerLibUpdate
PropertyDef.Author.AttributeName        = emxGerLibUpdateAuthor
PropertyDef.InstalledDate.AttributeName = emxGerLibUpdateInstalledDate
PropertyDef.Version.AttributeName       = emxGerLibUpdateVersion

# emxGerLibUpdate calls trigger group "Process"
TypeDef.TriggerGroup.BusPolicy          = emxGerLibUpdateProcess
TypeDef.TriggerGroup.BusRelsBoth        = emxGerLibUpdateSubProcess
TypeDef.TriggerGroup.BusType            = emxGerLibUpdateProcess
TypeDef.TriggerGroup.FilePath           = datamodel/process
TypeDef.TriggerGroup.FilePrefix         = PROCESS_
TypeDef.TriggerGroup.TextLogging        = process
TypeDef.TriggerGroup.TextTitle          = PROCESS
TypeDef.TriggerGroup.ParameterDesc      = Export / Import of processes.
TypeDef.TriggerGroup.ParameterList      = process
}}}
For a deeper explanation see key "[UpdatePropertyFileFormat_TypeDef TypeDef]" and key "[UpdatePropertyFileFormat_PropertyDef PropertyDef]" of the property file format.
